// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMINAPP
  ADMINBASIC
  ADMINADVANCED
  USER
}

enum HabitatType {
  ZOO
  ACUARIO
}

enum ZooCategory {
  MAMMAL
  REPTILE
  BIRD
  INSECT
  AMPHIBIAN
  FISH
}

enum AquariumCategory {
  FISH
  MAMMAL
  REPTILE
  INVERTEBRATE
  AMPHIBIAN
}

model User {
  id           String       @id @default(uuid())
  name         String
  lastname     String
  role         Role         @default(USER)
  email        String       @unique
  passwordHash String
  address      AddressUser?
  habitat      Habitat[]
  ratings      Rating[]
  orders       Order[]
}

model AddressUser {
  id         String @id @default(uuid())
  street     String
  postalCode String
  city       String
  state      String
  country    String
  user       User   @relation(fields: [userId], references: [id])
  userId     String @unique
}

model Habitat {
  id                      String                    @id @default(uuid())
  name                    String
  type                    HabitatType
  logo                    String?
  user                    User                      @relation(fields: [userId], references: [id])
  userId                  String                    @unique
  animals                 Animal[]
  ratings                 Rating[]
  boletosStyles           BoletosStyle[]
  OrderItem               OrderItem[]
  AddressHabitat          AddressHabitat?
  ImageInstalaciones      ImageInstalaciones[]
  HabitatCategoryEspecies HabitatCategoryEspecies[]
}

model ImageInstalaciones {
  id        String  @id @default(uuid())
  url       String
  habitat   Habitat @relation(fields: [habitatId], references: [id])
  habitatId String
}

model AddressHabitat {
  id         String  @id @default(uuid())
  street     String
  state      String
  city       String
  country    String
  PostalCode String
  habitat    Habitat @relation(fields: [habitatId], references: [id])
  habitatId  String  @unique
}

model EspeciesCategory {
  id                      String                    @id @default(uuid())
  name                    String                    @unique
  description             String? // Descripción opcional
  Animal                  Animal[]
  HabitatCategoryEspecies HabitatCategoryEspecies[]
}

model HabitatCategoryEspecies {
  id         String           @id @default(uuid())
  habitat    Habitat          @relation(fields: [habitatId], references: [id])
  habitatId  String
  category   EspeciesCategory @relation(fields: [categoryId], references: [id])
  categoryId String
}

model Animal {
  id          String           @id @default(uuid())
  name        String
  description String
  habitatType HabitatType
  Habitat     Habitat          @relation(fields: [habitatId], references: [id])
  habitatId   String           @unique
  AnimalImage AnimalImage[]
  Category    EspeciesCategory @relation(fields: [categoryId], references: [id])
  categoryId  String           @unique
}

model AnimalImage {
  id       String @id @default(uuid())
  url      String
  animal   Animal @relation(fields: [animalId], references: [id])
  animalId String
}

model Rating {
  id        String  @id @default(uuid())
  message   String
  stars     Int
  user      User    @relation(fields: [userId], references: [id])
  userId    String  @unique
  zoo       Habitat @relation(fields: [habitatId], references: [id])
  habitatId String  @unique
}

model BoletosStyle {
  id        String      @id @default(uuid())
  color     String
  imageLogo String
  imageHero String
  habitat   Habitat     @relation(fields: [habitatId], references: [id])
  habitatId String
  title     String
  types     String[]
  OrderItem OrderItem[]
}

model Order {
  id      String      @id @default(uuid())
  amount  Float
  isPaid  Boolean
  payDate DateTime?
  user    User        @relation(fields: [userId], references: [id])
  userId  String
  items   OrderItem[]
}

model OrderItem {
  id            String       @id @default(uuid())
  boletoStyle   BoletosStyle @relation(fields: [boletoStyleId], references: [id])
  boletoStyleId String
  habitat       Habitat      @relation(fields: [habitatId], references: [id])
  habitatId     String
  price         Float
  coupon        String? // Si el cupón se usa, almacena aquí el código
  isPaid        Boolean
  order         Order        @relation(fields: [orderId], references: [id])
  orderId       String
}
